plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.151'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft {
    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        //ngl, I kinda like having the server gui open so that I can remember that it's running and so that I can see the logs more easily
        //programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath(),
                '--existing', file('optional_assets/1.21/biomesoplenty').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url "https://cursemaven.com"
    }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.architectury.dev/" }
}

dependencies {
    // Specify the version of Minecraft to use.
    // Depending on the plugin applied there are several options. We will assume you applied the userdev plugin as shown above.
    // The group for userdev is net.neoforged, the module name is neoforge, and the version is the same as the neoforge version.
    // You can however also use the vanilla plugin (net.neoforged.gradle.vanilla) to use a version of Minecraft without the neoforge loader.
    // And its provides the option to then use net.minecraft as the group, and one of; client, server or joined as the module name, plus the game version as version.
    // For all intends and purposes: You can treat this dependency as if it is a normal library you would use.
    implementation "net.neoforged:neoforge:${neo_version}"

    //JEI
    compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
    //localRuntime "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"

    //REI
    compileOnly "me.shedaniel:RoughlyEnoughItems-api-neoforge:$rei_version"
    compileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-neoforge:$rei_version"
    api "me.shedaniel.cloth:cloth-config-neoforge:$cloth_config_version"
    api "dev.architectury:architectury-neoforge:$architectury_version"
    runtimeOnly "me.shedaniel:RoughlyEnoughItems-neoforge:$rei_version"

    //Curios API
    compileOnly 'curse.maven:adorned-1036809:5638835-sources-5638839'

    //Immersive Engineering API
    //Waiting for IE update
    //compileOnly "curse.maven:immersive-engineering-231951:4782978"

    //Claim Compats
    //FTB Chunks claim purchase compat
    compileOnly 'curse.maven:ftb-chunks-forge-314906:5448646'
    compileOnly 'curse.maven:ftb-teams-forge-404468:5448371'
    compileOnly 'curse.maven:ftb-library-forge-404465:5482367'
    compileOnly 'curse.maven:architectury-api-419699:5521987'

    //Cadmus claim purchase compat
    //Waiting for update
    //compileOnly 'curse.maven:cadmus-845832:4718413'
    //compileOnly 'curse.maven:resourceful-lib-570073:4927082'

    //Flan claim purchase compat
    compileOnly "curse.maven:flan-forge-493246:5451218"

    //Wood Compatibility (should be implementation for dataGen)
    //Biomes O' Plenty
    implementation "curse.maven:biomes-o-plenty-220318:5512375"
    implementation "curse.maven:glitchcore-955399:5483773"
    implementation "curse.maven:terrablender-neoforge-940057:5429865"
    //Quark
    //Waiting for update
    //implementation "curse.maven:quark-243121:5084013"
    //implementation "curse.maven:zeta-968868:5078215"

    //Other Compats
    //Supplementaries RedMerchant compat
    //compileOnly "curse.maven:supplementaries-412082:5068158"
    //compileOnly "curse.maven:selene-499980:5068161"

    //Farming For Blockheads trader compat
    compileOnly "curse.maven:farming-for-blockheads-261924:5426962"
    compileOnly "curse.maven:balm-531761:5442096"

}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
