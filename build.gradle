buildscript {
    dependencies {
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = '1.19.2-2.2.1.3f'
group = 'io.github.lightman314.lightmanscurrency'
archivesBaseName = 'lightmanscurrency'

mixin {
    add sourceSets.main, "lightmanscurrency.refmap.json"
    config "lightmanscurrency.mixins.json"
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: 'official', version: '1.19.2'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            
            property 'forge.enabledGameTestNamespaces', 'lightmanscurrency'

            //Fix other mods mixins
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                lightmanscurrency {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'lightmanscurrency', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'),
                        '--existing', file('optional_assets/1.19.2/biomesoplenty'),
                        '--existing', file('optional_assets/1.19.2/byg'),
                        '--existing', file('optional_assets/1.19.2/quark'),
                        '--existing', file('optional_assets/1.19.2/tinkers')

            //Fix other mods mixins
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                lightmanscurrency {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url = "https://www.cursemaven.com"
    }
    //JEI repository when working on plugin
    /*maven {
    	name = "Progwm17 maven"
    	url = "https://dvs1.progwm16.com/files/maven/"
    }
    maven {
    	name = "ModMaven"
    	url = "https://modmaven.k-4u.nl"
    }*/
    //Geckolib
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
}

dependencies {

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    minecraft 'net.minecraftforge:forge:1.19.2-43.3.0'

   	//JEI when actually working on plugin
    //compileOnly fg.deobf("mezz.jei:jei-1.19.3-common-api:12.1.1.8")
    //compileOnly fg.deobf("mezz.jei:jei-1.19.3-forge-api:12.1.1.8")
    //JEI when not working on plugin, to save compile/runClient time
    implementation fg.deobf("curse.maven:jei-238222:3873049")
    
    //Curios API
    compileOnly fg.deobf("curse.maven:curios-309927:3841962")

    //Immersive Engineering API
    compileOnly fg.deobf("curse.maven:immersive-engineering-231951:3963698")
    
    compileOnly fg.deobf('curse.maven:inventory-profiles-next-495267:3825214')
    compileOnly fg.deobf('curse.maven:lightmans-discord-integration-545459:4660939')

    //FTB Chunks claim purchase compat
    compileOnly fg.deobf('curse.maven:ftb-chunks-forge-314906:4727833')
    compileOnly fg.deobf('curse.maven:ftb-teams-forge-404468:4611938')
    compileOnly fg.deobf('curse.maven:ftb-library-forge-404465:4661834')
    compileOnly fg.deobf('curse.maven:architectury-api-419699:4555749')
    //Flan claim purchase compat
    compileOnly fg.deobf("curse.maven:flan-forge-493246:4432476")

    //Wood Compatibility
    //Biomes O' Plenty
    implementation fg.deobf("curse.maven:biomes-o-plenty-220318:4473556")
    implementation fg.deobf("curse.maven:terrablender-563928:4618490")
    //BYG
    implementation fg.deobf("curse.maven:oh-the-biomes-youll-go-247560:4602115")
    //implementation fg.deobf("curse.maven:terrablender-563928:4618490") //Already included by BOP
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-1.19:3.1.40")
    implementation fg.deobf("curse.maven:corgilib-693313:4554111")
    //Quark
    implementation fg.deobf("curse.maven:quark-243121:4812006")
    implementation fg.deobf("curse.maven:autoreglib-250363:4100299")
    //Tinker's Construct
    implementation fg.deobf("curse.maven:tinkers-construct-74072:5358052")
    implementation fg.deobf("curse.maven:mantle-74924:5339977")

    //Supplementaries RedMerchant compat
    compileOnly fg.deobf("curse.maven:supplementaries-412082:5152602")
    compileOnly fg.deobf("curse.maven:selene-499980:4983975")

    //Farming For Blockheads compat
    implementation fg.deobf("curse.maven:farming-for-blockheads-261924:4749429")
    implementation fg.deobf("curse.maven:balm-531761:4751735")

    
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "lightmanscurrency",
            "Specification-Vendor": "lightman314",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"lightman314",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}